// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models based on the HIS requirements

model Doctor {
  id          String    @id @default(uuid())
  clerkId     String    @unique // Link to Clerk user
  name        String
  email       String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  clients     Client[]
  programs    Program[]
}

model Client {
  id           String       @id @default(uuid())
  name         String
  email        String?
  phone        String?
  status       String       @default("active") // active, inactive
  lastVisit    DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  doctorId     String       // For Row-Level Security
  doctor       Doctor       @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  enrollments  Enrollment[]

  @@index([doctorId])
}

model Program {
  id              String       @id @default(uuid())
  name            String
  description     String?
  status          String       @default("active") // active, inactive
  startDate       DateTime
  endDate         DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  doctorId        String       // For Row-Level Security
  doctor          Doctor       @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  enrollments     Enrollment[]

  @@index([doctorId])
}

model Enrollment {
  id          String    @id @default(uuid())
  clientId    String
  programId   String
  startDate   DateTime  @default(now())
  endDate     DateTime?
  status      String    @default("active") // active, completed, dropped
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  client      Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  program     Program   @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@unique([clientId, programId])
  @@index([clientId])
  @@index([programId])
}
